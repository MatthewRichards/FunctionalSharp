<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace DiscriminatedUnions
{
	using System;
<#
var maxNumberOfTypeArguments = 10;
#>
<#
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>

    public class DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>
    {
	    int tag;

<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
        readonly Type<#= i + 1 #> Item<#= i + 1 #>;
        public DiscriminatedUnion(Type<#= i + 1 #> item) { Item<#= i + 1 #> = item; tag = <#= i #>; }
<#
}
#>

        public ReturnType Match<ReturnType>(<#= FunctionArgumentsFor(numberOfArguments) #>)
        {
            switch (tag)
            {
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
                case <#= i#>: return Function<#= i+1 #>(Item<#= i + 1 #>);
<#
}
#>
                default: throw new Exception("Unrecognized tag value: " + tag);
            }
        }
    }

<#
}
#>
}
<#+
public string TypeArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Type{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}

public string FunctionArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Func<Type{0}, ReturnType> Function{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}
#>