<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace DiscriminatedUnions
{
	using System;
	using System.Linq;
    using System.Collections.Generic;
<#
var maxNumberOfTypeArguments = 10;
#>
	public static class DiscriminatedUnionListExtensions
	{
<#
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>
		public static void Match<<#= TypeArgumentsFor(numberOfArguments) #>>(this List<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values,  <#= ActionArgumentsFor(numberOfArguments) #>)
        {
            values.ForEach(item => item.Match(
<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
                type<#= i + 1 #>Item => Action<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
                type<#= numberOfArguments #>Item => Action<#= numberOfArguments #>(type<#= numberOfArguments #>Item)
            ));
        }

        public static IEnumerable<ReturnType> Match<<#= TypeArgumentsFor(numberOfArguments) #>, ReturnType>(this List<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values,<#= FunctionArgumentsFor(numberOfArguments) #>)
        {
            return values.Select(item => item.Match(
<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
                type<#= i + 1 #>Item => Function<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
                type<#= numberOfArguments #>Item => Function<#= numberOfArguments #>(type<#= numberOfArguments #>Item)
            ));
        }

		public static void Match<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType>(this List<DiscriminatedUnionWithBase<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType>> values,<#= ActionArgumentsFor(numberOfArguments) #>)
        <#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
        where Type<#= i+1 #> : BaseType 
<#
}
#>
		{
            values.ForEach(item => item.Match(
<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
                type<#= i + 1 #>Item => Action<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
                type<#= numberOfArguments #>Item => Action<#= numberOfArguments #>(type<#= numberOfArguments #>Item)
            ));
        }

        public static IEnumerable<ReturnType> Match<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType, ReturnType>(this List<DiscriminatedUnionWithBase<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType>> values,<#= FunctionArgumentsFor(numberOfArguments) #>)
        <#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
        where Type<#= i+1 #> : BaseType 
<#
}
#>
		{
            return values.Select(item => item.Match(
<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
                type<#= i + 1 #>Item => Function<#= i + 1 #>(type<#= i + 1 #>Item),
<#
}
#>
                type<#= numberOfArguments #>Item => Function<#= numberOfArguments #>(type<#= numberOfArguments #>Item)
            ));
        }
<#
}
#>
<#
////////////////
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>        /// <summary>
        /// Adds the object to the end of the DiscriminatedUnionList
        /// </summary>
        /// <param name="item"></param>
        public static void Add<<#= TypeArgumentsFor(numberOfArguments) #>>(this List<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values ,Type<#= i + 1 #> item)
        {
            values.Add(new DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>(item));
        }

		/// <summary>
        /// Adds the object to the end of the DiscriminatedUnionList
        /// </summary>
        /// <param name="item"></param>
		public static void AddRange<<#= TypeArgumentsFor(numberOfArguments) #>>(this List<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>> values ,IEnumerable<Type<#= i + 1 #>> collectionToAdd)
        {
            foreach (var item in collectionToAdd)
            {
                values.Add(item);
            }
        }
<#
}
}
#>
/////////////////////////
	}
}
<#+
public string TypeArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Type{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}

public string FunctionArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Func<Type{0}, ReturnType> Function{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}

public string ActionArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Action<Type{0}> Action{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}
#>