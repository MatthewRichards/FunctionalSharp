<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace DiscriminatedUnions
{
	using System;
    using System.Collections.Generic;
<#
var maxNumberOfTypeArguments = 10;
#>
<#
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>

    public class DiscriminatedUnionList<<#= TypeArgumentsFor(numberOfArguments) #>> : List<DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>>
    {
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
        public void Add(Type<#= i + 1 #> item)
        {
            this.Add(new DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>(item));
        }

		public void AddRange(IEnumerable<Type<#= i + 1 #>> collectionToAdd)
        {
            foreach (var item in collectionToAdd)
            {
                this.Add(item);
            }
        }
<#
}
if(numberOfArguments != maxNumberOfTypeArguments)
{
#>
        public DiscriminatedUnionList<<#= TypeArgumentsFor(numberOfArguments) #>, TypeToMerge> Merge<TypeToMerge>(IEnumerable<TypeToMerge> toMerge)
        {
            var result = new DiscriminatedUnionList<<#= TypeArgumentsFor(numberOfArguments) #>, TypeToMerge>();
            this.ForEach(item => item.Match(
			<#for(var i = 0; i < numberOfArguments -1; i +=1)
{
#>
                Type<#= i + 1 #>Item => result.Add(Type<#= i + 1 #>Item),
				<#
}
#>
                Type<#= numberOfArguments #>Item => result.Add(Type<#= numberOfArguments #>Item)
                ));
	
            foreach(var item in toMerge)
            {
                result.Add(item);
            }

            return result;
        }
<#
}
#>
    }
<#

}
#>
}
<#+
public string TypeArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Type{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}

public string FunctionArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Func<Type{0}, ReturnType> Function{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}
#>