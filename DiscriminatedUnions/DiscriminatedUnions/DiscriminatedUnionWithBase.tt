<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace DiscriminatedUnions
{
	using System;
	using System.ComponentModel;
<#
var maxNumberOfTypeArguments = 10;
#>
<#
for(var numberOfArguments = 2; numberOfArguments <= maxNumberOfTypeArguments; numberOfArguments +=1)
{
#>
    [Serializable]
    public class DiscriminatedUnionWithBase<<#= TypeArgumentsFor(numberOfArguments) #>, BaseType> : DiscriminatedUnion<<#= TypeArgumentsFor(numberOfArguments) #>>
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
        where Type<#= i+1 #> : BaseType 
<#
}
#>
    {
		/// <summary>
        /// Private constructor to support serialization.
        /// </summary>
        private DiscriminatedUnionWithBase() : base() { }
<#for(var i = 0; i < numberOfArguments; i +=1)
{
#>
        public DiscriminatedUnionWithBase(Type<#= i+1 #> item) : base(item) { }
<#
}
#>

        public BaseType AnyType
        {
            get
            {
                switch (tag)
                {<#
for(var i = 0; i < numberOfArguments; i +=1)
{
#>
					case <#= i#>: return Item<#= i+1 #>;<#
}#>

                    default: throw new System.NotSupportedException("Unrecognized tag value: " + tag);
                }
            }
        }
    }
<#
}
#>
}


<#+
public string TypeArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Type{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}

public string FunctionArgumentsFor(int numberOfArguments)
{
	var result = "";
	for(var i = 0; i < numberOfArguments; i+=1)
	{
		result += String.Format("Func<Type{0}, ReturnType> Function{0}, ",i + 1);
	}
	return result.Trim(' ').Trim(',');
}
#>